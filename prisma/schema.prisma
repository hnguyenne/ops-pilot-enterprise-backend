// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PROJECTMANAGER
  EMPLOYEE
  ORGADMIN
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  PENDING
  COMPLETED
  OVERDUE
}

model Organization {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime   @default(now())
  User        User[]
  Project     Project[]
  workflow    Workflow[]
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  emailVerified  Boolean      @default(false)
  image          String?
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  role           Role         @default(EMPLOYEE)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  AuditLog       AuditLog[]
  TimeLog        TimeLog[]
  Project        Project[]    @relation("ProjectUsers")
  Task           Task[]
  Session        Session[]
  Account        Account[]
}

model Session {
  id        String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime @updatedAt
  token     String
  ipAddress String?
  userAgent String?
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Jwks {
  id         String   @id @default(cuid())
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id])

  @@unique([providerId, accountId])
  @@index([userId])
  @@index([accessTokenExpiresAt])
  @@index([refreshTokenExpiresAt])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@index([identifier])
}

model Project {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime
  status         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  User           User[]       @relation("ProjectUsers")
  Task           Task[]
  Workflow       Workflow[]
}

model Task {
  id           Int       @id @default(autoincrement())
  status       Status    @default(NOT_STARTED)
  name         String
  description  String
  assigneeId   String
  assignee     User      @relation(fields: [assigneeId], references: [id])
  TimeLog      TimeLog[]
  dependencies Task[]    @relation("TaskDeps") //Tasks that must be completed before this one
  dependents   Task[]    @relation("TaskDeps") //Tasks that depend on this one
  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id])
  workflowId   Int
  workflow     Workflow  @relation(fields: [workflowId], references: [id])

  @@index([projectId])
  @@index([workflowId])
  @@index([assigneeId])
}

model Workflow {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  Task           Task[]
  project        Project      @relation(fields: [projectId], references: [id])
  projectId      Int
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  target    String
  data      String
  timestamp DateTime @default(now())
}

model TimeLog {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  task   Task     @relation(fields: [taskId], references: [id])
  taskId Int
  date   DateTime @default(now())
  hours  Int
}
