// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PROJECTMANAGER
  EMPLOYEE
  ORGADMIN
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  PENDING
  COMPLETED
  OVERDUE
}

model Organization {
  id Int @id @default(autoincrement())
  name String
  description String
  createdAt DateTime @default(now())
  User User[]
  Project Project[]
  workflow Workflow[]
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String // hashed password
  role Role @default(EMPLOYEE)
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  AuditLog AuditLog[]
  TimeLog TimeLog[]
  Project Project[] @relation("ProjectUsers")
  Task Task[]
}

model Project {
  id Int @id @default(autoincrement())
  name String
  description String
  startDate DateTime
  endDate DateTime
  status String
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  User User[] @relation("ProjectUsers")
  Task Task[]
  Workflow Workflow[]
}

model Task {
  id Int @id @default(autoincrement())
  status Status @default(NOT_STARTED)
  name String
  description String
  assigneeId Int
  assignee User @relation(fields: [assigneeId], references: [id])
  TimeLog TimeLog[]
  dependencies Task[] @relation("TaskDeps") //Tasks that must be completed before this one
  dependents Task[] @relation("TaskDeps") //Tasks that depend on this one
  projectId Int
  project Project @relation(fields: [projectId], references: [id])
  workflowId Int
  workflow Workflow @relation(fields: [workflowId], references: [id])
}

model Workflow {
  id Int @id @default(autoincrement())
  name String
  description String
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  Task Task[]
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model AuditLog {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  action String
  target String
  data String
  timestamp DateTime @default(now())
}

model TimeLog {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  task Task @relation(fields: [taskId], references: [id])
  taskId Int
  date DateTime @default(now())
  hours Int
}

